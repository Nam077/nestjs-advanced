services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs_app
    ports:
      - '${APP_PORT}:${APP_PORT}'
    env_file:
      - .env.docker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${APP_PORT}/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      - ./src:/usr/src/app/src
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  db:
    image: postgres:16-alpine
    container_name: postgres_db
    ports:
      - '${DB_PORT}:${DB_PORT}'
    env_file:
      - .env.docker
    environment:
<<<<<<< HEAD
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASWORD: ${DB_PASSWORD}
=======
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
>>>>>>> main
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - '${REDIS_PORT}:6379'
    env_file:
      - .env.docker
    volumes:
      - redis_data:/data
    networks:
      - my_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    env_file:
      - .env.docker
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT} # Cổng cho RabbitMQ
      - '15672:15672' # Cổng cho giao diện quản lý
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redis_insight
    ports:
      - '8001:8001' # RedisInsight GUI chạy trên cổng 8001
    networks:
      - my_network
    depends_on:
      - redis

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    environment:
      - REDIS_HOSTS=local:redis_cache:6379
    ports:
      - '8081:8081' # Redis Commander chạy trên cổng 8081
    networks:
      - my_network
    depends_on:
      - redis

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:


networks:
  my_network:
    driver: bridge
